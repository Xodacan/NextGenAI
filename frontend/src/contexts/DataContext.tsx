import React, { createContext, useContext, useState, useEffect } from 'react';

export interface Patient {
  id: string;
  firstName: string;
  lastName: string;
  dateOfBirth: string;
  admissionDate: string;
  roomNumber: string;
  status: 'Active' | 'Pending Discharge' | 'Discharged';
}

export interface ClinicalDocument {
  id: string;
  patientId: string;
  practitionerId: string;
  documentType: string;
  fileName: string;
  uploadTimestamp: string;
  summary?: string;
}

export interface DischargeSummary {
  id: string;
  patientId: string;
  status: 'Draft' | 'Pending Review' | 'Approved';
  generatedContent: string;
  finalContent?: string;
  createdTimestamp: string;
  approvedBy?: string;
  approvalTimestamp?: string;
}

interface DataContextType {
  patients: Patient[];
  documents: ClinicalDocument[];
  summaries: DischargeSummary[];
  addPatient: (patient: Omit<Patient, 'id'>) => void;
  updatePatient: (id: string, updates: Partial<Patient>) => void;
  addDocument: (document: Omit<ClinicalDocument, 'id' | 'uploadTimestamp'>) => void;
  generateSummary: (patientId: string) => Promise<string>;
  updateSummary: (id: string, updates: Partial<DischargeSummary>) => void;
  getPatientDocuments: (patientId: string) => ClinicalDocument[];
  getPatientSummary: (patientId: string) => DischargeSummary | undefined;
}

const DataContext = createContext<DataContextType | undefined>(undefined);

export function DataProvider({ children }: { children: React.ReactNode }) {
  const [patients, setPatients] = useState<Patient[]>([]);
  const [documents, setDocuments] = useState<ClinicalDocument[]>([]);
  const [summaries, setSummaries] = useState<DischargeSummary[]>([]);

  useEffect(() => {
    // Initialize with mock data
    setPatients([
      {
        id: '1',
        firstName: 'John',
        lastName: 'Doe',
        dateOfBirth: '1965-03-15',
        admissionDate: '2024-01-15',
        roomNumber: 'A-204',
        status: 'Active'
      },
      {
        id: '2',
        firstName: 'Emily',
        lastName: 'Davis',
        dateOfBirth: '1978-11-22',
        admissionDate: '2024-01-18',
        roomNumber: 'B-156',
        status: 'Pending Discharge'
      }
    ]);

    setDocuments([
      {
        id: '1',
        patientId: '1',
        practitionerId: '1',
        documentType: 'Admission Form',
        fileName: 'admission_john_doe.pdf',
        uploadTimestamp: '2024-01-15T10:30:00Z'
      },
      {
        id: '2',
        patientId: '1',
        practitionerId: '1',
        documentType: 'Lab Results',
        fileName: 'lab_results_jan_16.pdf',
        uploadTimestamp: '2024-01-16T14:15:00Z'
      }
    ]);
  }, []);

  const addPatient = (patient: Omit<Patient, 'id'>) => {
    const newPatient = { ...patient, id: Date.now().toString() };
    setPatients(prev => [...prev, newPatient]);
  };

  const updatePatient = (id: string, updates: Partial<Patient>) => {
    setPatients(prev => prev.map(p => p.id === id ? { ...p, ...updates } : p));
  };

  const addDocument = (document: Omit<ClinicalDocument, 'id' | 'uploadTimestamp'>) => {
    const newDocument = {
      ...document,
      id: Date.now().toString(),
      uploadTimestamp: new Date().toISOString()
    };
    setDocuments(prev => [...prev, newDocument]);
  };

  const generateSummary = async (patientId: string): Promise<string> => {
    // Simulate AI processing delay
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const patient = patients.find(p => p.id === patientId);
    const patientDocs = documents.filter(d => d.patientId === patientId);
    
    // Simulate AI-generated content
    const aiContent = `DISCHARGE SUMMARY

Patient: ${patient?.firstName} ${patient?.lastName}
DOB: ${patient?.dateOfBirth}
Admission Date: ${patient?.admissionDate}

CLINICAL SUMMARY:
Based on analysis of ${patientDocs.length} clinical documents, the patient presented with [AI-analyzed condition]. Treatment included [AI-extracted treatments]. Patient showed good response to therapy with stable vital signs.

MEDICATIONS:
- [AI-extracted medications from documents]
- Discharge prescriptions as per clinical notes

FOLLOW-UP:
- Primary care follow-up in 1 week
- Specialist consultation as indicated
- Return if symptoms worsen

CONDITION AT DISCHARGE: Stable, improved from admission

This summary was generated by DischargeAI and requires clinical review and approval.`;

    const newSummary: DischargeSummary = {
      id: Date.now().toString(),
      patientId,
      status: 'Draft',
      generatedContent: aiContent,
      createdTimestamp: new Date().toISOString()
    };

    setSummaries(prev => [...prev, newSummary]);
    return newSummary.id;
  };

  const updateSummary = (id: string, updates: Partial<DischargeSummary>) => {
    setSummaries(prev => prev.map(s => s.id === id ? { ...s, ...updates } : s));
  };

  const getPatientDocuments = (patientId: string) => {
    return documents.filter(d => d.patientId === patientId);
  };

  const getPatientSummary = (patientId: string) => {
    return summaries.find(s => s.patientId === patientId);
  };

  return (
    <DataContext.Provider value={{
      patients,
      documents,
      summaries,
      addPatient,
      updatePatient,
      addDocument,
      generateSummary,
      updateSummary,
      getPatientDocuments,
      getPatientSummary
    }}>
      {children}
    </DataContext.Provider>
  );
}

export function useData() {
  const context = useContext(DataContext);
  if (context === undefined) {
    throw new Error('useData must be used within a DataProvider');
  }
  return context;
}